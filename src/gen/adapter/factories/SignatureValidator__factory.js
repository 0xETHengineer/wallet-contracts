"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
exports.SignatureValidator__factory = void 0;
var ethers_1 = require("ethers");
var _abi = [
    {
        inputs: [
            {
                internalType: "bytes",
                name: "_signature",
                type: "bytes"
            },
            {
                internalType: "bytes32",
                name: "_s",
                type: "bytes32"
            },
        ],
        name: "InvalidSValue",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "_signature",
                type: "bytes"
            },
        ],
        name: "InvalidSignatureLength",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "_signature",
                type: "bytes"
            },
            {
                internalType: "uint256",
                name: "_v",
                type: "uint256"
            },
        ],
        name: "InvalidVValue",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "_signature",
                type: "bytes"
            },
        ],
        name: "SignerIsAddress0",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "_signature",
                type: "bytes"
            },
            {
                internalType: "uint256",
                name: "_type",
                type: "uint256"
            },
            {
                internalType: "bool",
                name: "_recoverMode",
                type: "bool"
            },
        ],
        name: "UnsupportedSignatureType",
        type: "error"
    },
];
var _bytecode = "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220f08e23b90a43320a5801cfcb0ba2f8aa839b600ea726cbe8099d7af861905ab264736f6c634300080e0033";
var SignatureValidator__factory = /** @class */ (function (_super) {
    __extends(SignatureValidator__factory, _super);
    function SignatureValidator__factory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = this;
        if (args.length === 1) {
            _this = _super.call(this, _abi, _bytecode, args[0]) || this;
        }
        else {
            _this = _super.apply(this, args) || this;
        }
        return _this;
    }
    SignatureValidator__factory.prototype.deploy = function (overrides) {
        return _super.prototype.deploy.call(this, overrides || {});
    };
    SignatureValidator__factory.prototype.getDeployTransaction = function (overrides) {
        return _super.prototype.getDeployTransaction.call(this, overrides || {});
    };
    SignatureValidator__factory.prototype.attach = function (address) {
        return _super.prototype.attach.call(this, address);
    };
    SignatureValidator__factory.prototype.connect = function (signer) {
        return _super.prototype.connect.call(this, signer);
    };
    SignatureValidator__factory.createInterface = function () {
        return new ethers_1.utils.Interface(_abi);
    };
    SignatureValidator__factory.connect = function (address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    };
    SignatureValidator__factory.bytecode = _bytecode;
    SignatureValidator__factory.abi = _abi;
    return SignatureValidator__factory;
}(ethers_1.ContractFactory));
exports.SignatureValidator__factory = SignatureValidator__factory;
