/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SubModuleAuthLegacyInterface extends ethers.utils.Interface {
  functions: {
    "_recoverSignature(bytes32,bytes,uint256)": FunctionFragment;
    "updateImageHash(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_recoverSignature",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateImageHash",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "_recoverSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateImageHash",
    data: BytesLike
  ): Result;

  events: {
    "ImageHashUpdated(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ImageHashUpdated"): EventFragment;
}

export type ImageHashUpdatedEvent = TypedEvent<
  [string] & { newImageHash: string }
>;

export class SubModuleAuthLegacy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SubModuleAuthLegacyInterface;

  functions: {
    _recoverSignature(
      _msgSubDigest: BytesLike,
      _signature: BytesLike,
      _rindex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        _imageHash: string;
        _weight: BigNumber;
        _thershold: BigNumber;
      }
    >;

    updateImageHash(
      _imageHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _recoverSignature(
    _msgSubDigest: BytesLike,
    _signature: BytesLike,
    _rindex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      _imageHash: string;
      _weight: BigNumber;
      _thershold: BigNumber;
    }
  >;

  updateImageHash(
    _imageHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _recoverSignature(
      _msgSubDigest: BytesLike,
      _signature: BytesLike,
      _rindex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        _imageHash: string;
        _weight: BigNumber;
        _thershold: BigNumber;
      }
    >;

    updateImageHash(
      _imageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ImageHashUpdated(bytes32)"(
      newImageHash?: null
    ): TypedEventFilter<[string], { newImageHash: string }>;

    ImageHashUpdated(
      newImageHash?: null
    ): TypedEventFilter<[string], { newImageHash: string }>;
  };

  estimateGas: {
    _recoverSignature(
      _msgSubDigest: BytesLike,
      _signature: BytesLike,
      _rindex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateImageHash(
      _imageHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _recoverSignature(
      _msgSubDigest: BytesLike,
      _signature: BytesLike,
      _rindex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateImageHash(
      _imageHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
