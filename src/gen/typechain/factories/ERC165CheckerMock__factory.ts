/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC165CheckerMock,
  ERC165CheckerMockInterface,
} from "../ERC165CheckerMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4",
      },
    ],
    name: "doesContractImplementInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610226806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063e9c5438414610030575b600080fd5b61004361003e366004610179565b610057565b604051901515815260200160405180910390f35b60008080610085857f01ffc9a70000000000000000000000000000000000000000000000000000000061012c565b9092509050811580610095575080155b156100a557600092505050610126565b6100cf857fffffffff0000000000000000000000000000000000000000000000000000000061012c565b90925090508115806100e057508015155b156100f057600092505050610126565b6100fa858561012c565b909250905060018214801561010f5750806001145b1561011f57600192505050610126565b6000925050505b92915050565b6040517f01ffc9a7000000000000000000000000000000000000000000000000000000008082526004820183905260009182919060208160248189617530fa905190969095509350505050565b6000806040838503121561018c57600080fd5b823573ffffffffffffffffffffffffffffffffffffffff811681146101b057600080fd5b915060208301357fffffffff00000000000000000000000000000000000000000000000000000000811681146101e557600080fd5b80915050925092905056fea264697066735822122063da1367391973376706d1e7adde90e1d2a6755257efe9baacf1771c833a2f7164736f6c634300080e0033";

export class ERC165CheckerMock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC165CheckerMock> {
    return super.deploy(overrides || {}) as Promise<ERC165CheckerMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC165CheckerMock {
    return super.attach(address) as ERC165CheckerMock;
  }
  connect(signer: Signer): ERC165CheckerMock__factory {
    return super.connect(signer) as ERC165CheckerMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC165CheckerMockInterface {
    return new utils.Interface(_abi) as ERC165CheckerMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC165CheckerMock {
    return new Contract(address, _abi, signerOrProvider) as ERC165CheckerMock;
  }
}
