/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SessionUtilsInterface extends ethers.utils.Interface {
  functions: {
    "requireSessionNonce(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "requireSessionNonce",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "requireSessionNonce",
    data: BytesLike
  ): Result;

  events: {
    "GapNonceChange(uint256,uint256,uint256)": EventFragment;
    "ResetNonce(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GapNonceChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResetNonce"): EventFragment;
}

export type GapNonceChangeEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    _space: BigNumber;
    _oldNonce: BigNumber;
    _newNonce: BigNumber;
  }
>;

export type ResetNonceEvent = TypedEvent<[BigNumber] & { _space: BigNumber }>;

export class SessionUtils extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SessionUtilsInterface;

  functions: {
    requireSessionNonce(
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  requireSessionNonce(
    _nonce: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    requireSessionNonce(
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GapNonceChange(uint256,uint256,uint256)"(
      _space?: null,
      _oldNonce?: null,
      _newNonce?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { _space: BigNumber; _oldNonce: BigNumber; _newNonce: BigNumber }
    >;

    GapNonceChange(
      _space?: null,
      _oldNonce?: null,
      _newNonce?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { _space: BigNumber; _oldNonce: BigNumber; _newNonce: BigNumber }
    >;

    "ResetNonce(uint256)"(
      _space?: null
    ): TypedEventFilter<[BigNumber], { _space: BigNumber }>;

    ResetNonce(
      _space?: null
    ): TypedEventFilter<[BigNumber], { _space: BigNumber }>;
  };

  estimateGas: {
    requireSessionNonce(
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    requireSessionNonce(
      _nonce: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
