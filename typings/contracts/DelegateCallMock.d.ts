/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface DelegateCallMockInterface extends Interface {
  functions: {
    setRevertFlag: TypedFunctionDescription<{
      encode([_revertFlag]: [boolean]): string;
    }>;

    write: TypedFunctionDescription<{
      encode([_key, _val]: [BigNumberish, BigNumberish]): string;
    }>;

    read: TypedFunctionDescription<{ encode([_key]: [BigNumberish]): string }>;
  };

  events: {
    Readed: TypedEventDescription<{ encodeTopics([_val]: [null]): string[] }>;
  };
}

export class DelegateCallMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): DelegateCallMock;
  attach(addressOrName: string): DelegateCallMock;
  deployed(): Promise<DelegateCallMock>;

  on(event: EventFilter | string, listener: Listener): DelegateCallMock;
  once(event: EventFilter | string, listener: Listener): DelegateCallMock;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): DelegateCallMock;
  removeAllListeners(eventName: EventFilter | string): DelegateCallMock;
  removeListener(eventName: any, listener: Listener): DelegateCallMock;

  interface: DelegateCallMockInterface;

  functions: {
    setRevertFlag(
      _revertFlag: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    write(
      _key: BigNumberish,
      _val: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    read(
      _key: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  setRevertFlag(
    _revertFlag: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  write(
    _key: BigNumberish,
    _val: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  read(
    _key: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    Readed(_val: null): EventFilter;
  };

  estimate: {
    setRevertFlag(_revertFlag: boolean): Promise<BigNumber>;

    write(_key: BigNumberish, _val: BigNumberish): Promise<BigNumber>;

    read(_key: BigNumberish): Promise<BigNumber>;
  };
}
