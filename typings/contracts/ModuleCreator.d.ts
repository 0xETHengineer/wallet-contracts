/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ModuleCreatorInterface extends Interface {
  functions: {
    createContract: TypedFunctionDescription<{
      encode([_code]: [Arrayish]): string;
    }>;
  };

  events: {
    CreatedContract: TypedEventDescription<{
      encodeTopics([_contract]: [null]): string[];
    }>;
  };
}

export class ModuleCreator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ModuleCreator;
  attach(addressOrName: string): ModuleCreator;
  deployed(): Promise<ModuleCreator>;

  on(event: EventFilter | string, listener: Listener): ModuleCreator;
  once(event: EventFilter | string, listener: Listener): ModuleCreator;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ModuleCreator;
  removeAllListeners(eventName: EventFilter | string): ModuleCreator;
  removeListener(eventName: any, listener: Listener): ModuleCreator;

  interface: ModuleCreatorInterface;

  functions: {
    createContract(
      _code: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  createContract(
    _code: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    CreatedContract(_contract: null): EventFilter;
  };

  estimate: {
    createContract(_code: Arrayish): Promise<BigNumber>;
  };
}
