/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface MainModuleDeployerInterface extends Interface {
  functions: {
    deploy: TypedFunctionDescription<{ encode([_factory]: [string]): string }>;
  };

  events: {
    Deployed: TypedEventDescription<{
      encodeTopics([_module, _initCodeHash]: [null, null]): string[];
    }>;
  };
}

export class MainModuleDeployer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MainModuleDeployer;
  attach(addressOrName: string): MainModuleDeployer;
  deployed(): Promise<MainModuleDeployer>;

  on(event: EventFilter | string, listener: Listener): MainModuleDeployer;
  once(event: EventFilter | string, listener: Listener): MainModuleDeployer;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MainModuleDeployer;
  removeAllListeners(eventName: EventFilter | string): MainModuleDeployer;
  removeListener(eventName: any, listener: Listener): MainModuleDeployer;

  interface: MainModuleDeployerInterface;

  functions: {
    deploy(
      _factory: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  deploy(
    _factory: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    Deployed(_module: null, _initCodeHash: null): EventFilter;
  };

  estimate: {
    deploy(_factory: string): Promise<BigNumber>;
  };
}
