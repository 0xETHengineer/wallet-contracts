/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IModuleAuthUpgradableInterface extends Interface {
  functions: {
    updateImageHash: TypedFunctionDescription<{
      encode([_imageHash]: [Arrayish]): string;
    }>;

    imageHash: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {};
}

export class IModuleAuthUpgradable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IModuleAuthUpgradable;
  attach(addressOrName: string): IModuleAuthUpgradable;
  deployed(): Promise<IModuleAuthUpgradable>;

  on(event: EventFilter | string, listener: Listener): IModuleAuthUpgradable;
  once(event: EventFilter | string, listener: Listener): IModuleAuthUpgradable;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): IModuleAuthUpgradable;
  removeAllListeners(eventName: EventFilter | string): IModuleAuthUpgradable;
  removeListener(eventName: any, listener: Listener): IModuleAuthUpgradable;

  interface: IModuleAuthUpgradableInterface;

  functions: {
    updateImageHash(
      _imageHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    imageHash(): Promise<string>;
  };

  updateImageHash(
    _imageHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  imageHash(): Promise<string>;

  filters: {};

  estimate: {
    updateImageHash(_imageHash: Arrayish): Promise<BigNumber>;

    imageHash(): Promise<BigNumber>;
  };
}
