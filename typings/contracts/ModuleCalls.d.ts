/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ModuleCallsInterface extends Interface {
  functions: {
    FACTORY: TypedFunctionDescription<{ encode([]: []): string }>;

    INIT_CODE_HASH: TypedFunctionDescription<{ encode([]: []): string }>;

    getConfigAddress: TypedFunctionDescription<{
      encode([_configs]: [
        { treshold: BigNumberish; keys: string[]; weigths: BigNumberish[] }
      ]): string;
    }>;

    isValidSignature: TypedFunctionDescription<{
      encode([_hash, _signatures]: [Arrayish, Arrayish]): string;
    }>;

    nonce: TypedFunctionDescription<{ encode([]: []): string }>;

    recoverSigner: TypedFunctionDescription<{
      encode([_hash, _signature]: [
        Arrayish,
        {
          r: Arrayish;
          s: Arrayish;
          v: BigNumberish;
          nonce: BigNumberish;
          sigType: BigNumberish;
        }
      ]): string;
    }>;

    updateConfigs: TypedFunctionDescription<{
      encode([_newConfigs]: [
        { treshold: BigNumberish; keys: string[]; weigths: BigNumberish[] }
      ]): string;
    }>;

    execute: TypedFunctionDescription<{
      encode([_txs, _signatures, _configs, _nonce]: [
        {
          delegateCall: boolean;
          skipOnError: boolean;
          target: string;
          value: BigNumberish;
          data: Arrayish;
        }[],
        {
          r: Arrayish;
          s: Arrayish;
          v: BigNumberish;
          nonce: BigNumberish;
          sigType: BigNumberish;
        }[],
        { treshold: BigNumberish; keys: string[]; weigths: BigNumberish[] },
        BigNumberish
      ]): string;
    }>;
  };

  events: {
    ConfigsUpdated: TypedEventDescription<{
      encodeTopics([newConfigs, newConfigHash]: [null, null]): string[];
    }>;

    NonceChange: TypedEventDescription<{
      encodeTopics([newNonce]: [null]): string[];
    }>;

    TxFailed: TypedEventDescription<{
      encodeTopics([_index, _reason]: [null, null]): string[];
    }>;
  };
}

export class ModuleCalls extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ModuleCalls;
  attach(addressOrName: string): ModuleCalls;
  deployed(): Promise<ModuleCalls>;

  on(event: EventFilter | string, listener: Listener): ModuleCalls;
  once(event: EventFilter | string, listener: Listener): ModuleCalls;
  addListener(eventName: EventFilter | string, listener: Listener): ModuleCalls;
  removeAllListeners(eventName: EventFilter | string): ModuleCalls;
  removeListener(eventName: any, listener: Listener): ModuleCalls;

  interface: ModuleCallsInterface;

  functions: {
    FACTORY(): Promise<string>;

    INIT_CODE_HASH(): Promise<string>;

    getConfigAddress(_configs: {
      treshold: BigNumberish;
      keys: string[];
      weigths: BigNumberish[];
    }): Promise<string>;

    isValidSignature(_hash: Arrayish, _signatures: Arrayish): Promise<string>;

    nonce(): Promise<BigNumber>;

    recoverSigner(
      _hash: Arrayish,
      _signature: {
        r: Arrayish;
        s: Arrayish;
        v: BigNumberish;
        nonce: BigNumberish;
        sigType: BigNumberish;
      }
    ): Promise<string>;

    updateConfigs(
      _newConfigs: {
        treshold: BigNumberish;
        keys: string[];
        weigths: BigNumberish[];
      },
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    execute(
      _txs: {
        delegateCall: boolean;
        skipOnError: boolean;
        target: string;
        value: BigNumberish;
        data: Arrayish;
      }[],
      _signatures: {
        r: Arrayish;
        s: Arrayish;
        v: BigNumberish;
        nonce: BigNumberish;
        sigType: BigNumberish;
      }[],
      _configs: {
        treshold: BigNumberish;
        keys: string[];
        weigths: BigNumberish[];
      },
      _nonce: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  FACTORY(): Promise<string>;

  INIT_CODE_HASH(): Promise<string>;

  getConfigAddress(_configs: {
    treshold: BigNumberish;
    keys: string[];
    weigths: BigNumberish[];
  }): Promise<string>;

  isValidSignature(_hash: Arrayish, _signatures: Arrayish): Promise<string>;

  nonce(): Promise<BigNumber>;

  recoverSigner(
    _hash: Arrayish,
    _signature: {
      r: Arrayish;
      s: Arrayish;
      v: BigNumberish;
      nonce: BigNumberish;
      sigType: BigNumberish;
    }
  ): Promise<string>;

  updateConfigs(
    _newConfigs: {
      treshold: BigNumberish;
      keys: string[];
      weigths: BigNumberish[];
    },
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  execute(
    _txs: {
      delegateCall: boolean;
      skipOnError: boolean;
      target: string;
      value: BigNumberish;
      data: Arrayish;
    }[],
    _signatures: {
      r: Arrayish;
      s: Arrayish;
      v: BigNumberish;
      nonce: BigNumberish;
      sigType: BigNumberish;
    }[],
    _configs: {
      treshold: BigNumberish;
      keys: string[];
      weigths: BigNumberish[];
    },
    _nonce: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    ConfigsUpdated(newConfigs: null, newConfigHash: null): EventFilter;

    NonceChange(newNonce: null): EventFilter;

    TxFailed(_index: null, _reason: null): EventFilter;
  };

  estimate: {
    FACTORY(): Promise<BigNumber>;

    INIT_CODE_HASH(): Promise<BigNumber>;

    getConfigAddress(_configs: {
      treshold: BigNumberish;
      keys: string[];
      weigths: BigNumberish[];
    }): Promise<BigNumber>;

    isValidSignature(
      _hash: Arrayish,
      _signatures: Arrayish
    ): Promise<BigNumber>;

    nonce(): Promise<BigNumber>;

    recoverSigner(
      _hash: Arrayish,
      _signature: {
        r: Arrayish;
        s: Arrayish;
        v: BigNumberish;
        nonce: BigNumberish;
        sigType: BigNumberish;
      }
    ): Promise<BigNumber>;

    updateConfigs(_newConfigs: {
      treshold: BigNumberish;
      keys: string[];
      weigths: BigNumberish[];
    }): Promise<BigNumber>;

    execute(
      _txs: {
        delegateCall: boolean;
        skipOnError: boolean;
        target: string;
        value: BigNumberish;
        data: Arrayish;
      }[],
      _signatures: {
        r: Arrayish;
        s: Arrayish;
        v: BigNumberish;
        nonce: BigNumberish;
        sigType: BigNumberish;
      }[],
      _configs: {
        treshold: BigNumberish;
        keys: string[];
        weigths: BigNumberish[];
      },
      _nonce: BigNumberish
    ): Promise<BigNumber>;
  };
}
