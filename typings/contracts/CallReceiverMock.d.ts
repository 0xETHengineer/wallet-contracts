/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface CallReceiverMockInterface extends Interface {
  functions: {
    lastValA: TypedFunctionDescription<{ encode([]: []): string }>;

    lastValB: TypedFunctionDescription<{ encode([]: []): string }>;

    setRevertFlag: TypedFunctionDescription<{
      encode([_revertFlag]: [boolean]): string;
    }>;

    testCall: TypedFunctionDescription<{
      encode([_valA, _valB]: [BigNumberish, Arrayish]): string;
    }>;
  };

  events: {};
}

export class CallReceiverMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): CallReceiverMock;
  attach(addressOrName: string): CallReceiverMock;
  deployed(): Promise<CallReceiverMock>;

  on(event: EventFilter | string, listener: Listener): CallReceiverMock;
  once(event: EventFilter | string, listener: Listener): CallReceiverMock;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): CallReceiverMock;
  removeAllListeners(eventName: EventFilter | string): CallReceiverMock;
  removeListener(eventName: any, listener: Listener): CallReceiverMock;

  interface: CallReceiverMockInterface;

  functions: {
    lastValA(): Promise<BigNumber>;

    lastValB(): Promise<string>;

    setRevertFlag(
      _revertFlag: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    testCall(
      _valA: BigNumberish,
      _valB: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  lastValA(): Promise<BigNumber>;

  lastValB(): Promise<string>;

  setRevertFlag(
    _revertFlag: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  testCall(
    _valA: BigNumberish,
    _valB: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    lastValA(): Promise<BigNumber>;

    lastValB(): Promise<BigNumber>;

    setRevertFlag(_revertFlag: boolean): Promise<BigNumber>;

    testCall(_valA: BigNumberish, _valB: Arrayish): Promise<BigNumber>;
  };
}
