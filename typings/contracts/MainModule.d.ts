/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface MainModuleInterface extends Interface {
  functions: {
    isValidSignature: TypedFunctionDescription<{
      encode([_signerAddress, _hash, _data, _signature]: [
        string,
        Arrayish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    nonce: TypedFunctionDescription<{ encode([]: []): string }>;

    recoverSigner: TypedFunctionDescription<{
      encode([_hash, _signature]: [Arrayish, Arrayish]): string;
    }>;

    execute: TypedFunctionDescription<{
      encode([_tx, _signature]: [
        {
          action: BigNumberish;
          target: string;
          value: BigNumberish;
          data: Arrayish;
        },
        Arrayish
      ]): string;
    }>;

    executeWithFee: TypedFunctionDescription<{
      encode([_tx, _gasPaymentTx, _signature]: [
        {
          action: BigNumberish;
          target: string;
          value: BigNumberish;
          data: Arrayish;
        },
        {
          action: BigNumberish;
          target: string;
          value: BigNumberish;
          data: Arrayish;
        },
        Arrayish
      ]): string;
    }>;
  };

  events: {
    NonceChange: TypedEventDescription<{
      encodeTopics([newNonce]: [null]): string[];
    }>;
  };
}

export class MainModule extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MainModule;
  attach(addressOrName: string): MainModule;
  deployed(): Promise<MainModule>;

  on(event: EventFilter | string, listener: Listener): MainModule;
  once(event: EventFilter | string, listener: Listener): MainModule;
  addListener(eventName: EventFilter | string, listener: Listener): MainModule;
  removeAllListeners(eventName: EventFilter | string): MainModule;
  removeListener(eventName: any, listener: Listener): MainModule;

  interface: MainModuleInterface;

  functions: {
    isValidSignature(
      _signerAddress: string,
      _hash: Arrayish,
      _data: Arrayish,
      _signature: Arrayish
    ): Promise<boolean>;

    nonce(): Promise<BigNumber>;

    recoverSigner(_hash: Arrayish, _signature: Arrayish): Promise<string>;

    execute(
      _tx: {
        action: BigNumberish;
        target: string;
        value: BigNumberish;
        data: Arrayish;
      },
      _signature: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    executeWithFee(
      _tx: {
        action: BigNumberish;
        target: string;
        value: BigNumberish;
        data: Arrayish;
      },
      _gasPaymentTx: {
        action: BigNumberish;
        target: string;
        value: BigNumberish;
        data: Arrayish;
      },
      _signature: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  isValidSignature(
    _signerAddress: string,
    _hash: Arrayish,
    _data: Arrayish,
    _signature: Arrayish
  ): Promise<boolean>;

  nonce(): Promise<BigNumber>;

  recoverSigner(_hash: Arrayish, _signature: Arrayish): Promise<string>;

  execute(
    _tx: {
      action: BigNumberish;
      target: string;
      value: BigNumberish;
      data: Arrayish;
    },
    _signature: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  executeWithFee(
    _tx: {
      action: BigNumberish;
      target: string;
      value: BigNumberish;
      data: Arrayish;
    },
    _gasPaymentTx: {
      action: BigNumberish;
      target: string;
      value: BigNumberish;
      data: Arrayish;
    },
    _signature: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    NonceChange(newNonce: null): EventFilter;
  };

  estimate: {
    isValidSignature(
      _signerAddress: string,
      _hash: Arrayish,
      _data: Arrayish,
      _signature: Arrayish
    ): Promise<BigNumber>;

    nonce(): Promise<BigNumber>;

    recoverSigner(_hash: Arrayish, _signature: Arrayish): Promise<BigNumber>;

    execute(
      _tx: {
        action: BigNumberish;
        target: string;
        value: BigNumberish;
        data: Arrayish;
      },
      _signature: Arrayish
    ): Promise<BigNumber>;

    executeWithFee(
      _tx: {
        action: BigNumberish;
        target: string;
        value: BigNumberish;
        data: Arrayish;
      },
      _gasPaymentTx: {
        action: BigNumberish;
        target: string;
        value: BigNumberish;
        data: Arrayish;
      },
      _signature: Arrayish
    ): Promise<BigNumber>;
  };
}
