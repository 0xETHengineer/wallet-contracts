/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface GasBurnerMockInterface extends Interface {
  functions: {
    burnGas: TypedFunctionDescription<{
      encode([_burn]: [BigNumberish]): string;
    }>;
  };

  events: {
    ProvidedGas: TypedEventDescription<{
      encodeTopics([_val]: [null]): string[];
    }>;
  };
}

export class GasBurnerMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): GasBurnerMock;
  attach(addressOrName: string): GasBurnerMock;
  deployed(): Promise<GasBurnerMock>;

  on(event: EventFilter | string, listener: Listener): GasBurnerMock;
  once(event: EventFilter | string, listener: Listener): GasBurnerMock;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): GasBurnerMock;
  removeAllListeners(eventName: EventFilter | string): GasBurnerMock;
  removeListener(eventName: any, listener: Listener): GasBurnerMock;

  interface: GasBurnerMockInterface;

  functions: {
    burnGas(
      _burn: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  burnGas(
    _burn: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    ProvidedGas(_val: null): EventFilter;
  };

  estimate: {
    burnGas(_burn: BigNumberish): Promise<BigNumber>;
  };
}
