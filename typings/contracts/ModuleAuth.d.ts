/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ModuleAuthInterface extends Interface {
  functions: {
    FACTORY: TypedFunctionDescription<{ encode([]: []): string }>;

    INIT_CODE_HASH: TypedFunctionDescription<{ encode([]: []): string }>;

    recoverSigner: TypedFunctionDescription<{
      encode([_hash, _signature]: [Arrayish, Arrayish]): string;
    }>;

    isValidSignature: TypedFunctionDescription<{
      encode([_hash, _signature]: [Arrayish, Arrayish]): string;
    }>;
  };

  events: {};
}

export class ModuleAuth extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ModuleAuth;
  attach(addressOrName: string): ModuleAuth;
  deployed(): Promise<ModuleAuth>;

  on(event: EventFilter | string, listener: Listener): ModuleAuth;
  once(event: EventFilter | string, listener: Listener): ModuleAuth;
  addListener(eventName: EventFilter | string, listener: Listener): ModuleAuth;
  removeAllListeners(eventName: EventFilter | string): ModuleAuth;
  removeListener(eventName: any, listener: Listener): ModuleAuth;

  interface: ModuleAuthInterface;

  functions: {
    FACTORY(): Promise<string>;

    INIT_CODE_HASH(): Promise<string>;

    recoverSigner(_hash: Arrayish, _signature: Arrayish): Promise<string>;

    isValidSignature(_hash: Arrayish, _signature: Arrayish): Promise<string>;
  };

  FACTORY(): Promise<string>;

  INIT_CODE_HASH(): Promise<string>;

  recoverSigner(_hash: Arrayish, _signature: Arrayish): Promise<string>;

  isValidSignature(_hash: Arrayish, _signature: Arrayish): Promise<string>;

  filters: {};

  estimate: {
    FACTORY(): Promise<BigNumber>;

    INIT_CODE_HASH(): Promise<BigNumber>;

    recoverSigner(_hash: Arrayish, _signature: Arrayish): Promise<BigNumber>;

    isValidSignature(_hash: Arrayish, _signature: Arrayish): Promise<BigNumber>;
  };
}
