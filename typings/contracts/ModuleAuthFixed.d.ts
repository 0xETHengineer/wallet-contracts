/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ModuleAuthFixedInterface extends Interface {
  functions: {
    FACTORY: TypedFunctionDescription<{ encode([]: []): string }>;

    INIT_CODE_HASH: TypedFunctionDescription<{ encode([]: []): string }>;

    isValidSignature: TypedFunctionDescription<{
      encode([_hash, _signatures]: [Arrayish, Arrayish]): string;
    }>;

    supportsInterface: TypedFunctionDescription<{
      encode([_interfaceID]: [Arrayish]): string;
    }>;
  };

  events: {};
}

export class ModuleAuthFixed extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ModuleAuthFixed;
  attach(addressOrName: string): ModuleAuthFixed;
  deployed(): Promise<ModuleAuthFixed>;

  on(event: EventFilter | string, listener: Listener): ModuleAuthFixed;
  once(event: EventFilter | string, listener: Listener): ModuleAuthFixed;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ModuleAuthFixed;
  removeAllListeners(eventName: EventFilter | string): ModuleAuthFixed;
  removeListener(eventName: any, listener: Listener): ModuleAuthFixed;

  interface: ModuleAuthFixedInterface;

  functions: {
    FACTORY(): Promise<string>;

    INIT_CODE_HASH(): Promise<string>;

    isValidSignature(_hash: Arrayish, _signatures: Arrayish): Promise<string>;

    supportsInterface(_interfaceID: Arrayish): Promise<boolean>;
  };

  FACTORY(): Promise<string>;

  INIT_CODE_HASH(): Promise<string>;

  isValidSignature(_hash: Arrayish, _signatures: Arrayish): Promise<string>;

  supportsInterface(_interfaceID: Arrayish): Promise<boolean>;

  filters: {};

  estimate: {
    FACTORY(): Promise<BigNumber>;

    INIT_CODE_HASH(): Promise<BigNumber>;

    isValidSignature(
      _hash: Arrayish,
      _signatures: Arrayish
    ): Promise<BigNumber>;

    supportsInterface(_interfaceID: Arrayish): Promise<BigNumber>;
  };
}
